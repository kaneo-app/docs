---
import { Github, MessageSquare, Twitter } from "lucide-astro";
---

<div class="py-24 bg-white dark:bg-zinc-950">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center">
      <h2
        class="text-3xl font-bold tracking-tight text-zinc-900 dark:text-white sm:text-4xl"
      >
        Join Our Community
      </h2>
      <p class="mt-4 text-lg text-zinc-600 dark:text-zinc-400">
        Connect with other developers, share ideas, and help shape the future of
        Kaneo
      </p>
    </div>

    <div class="mt-16 grid grid-cols-1 gap-8 md:grid-cols-3">
      <a
        href="https://github.com/orgs/kaneo-app/discussions"
        target="_blank"
        rel="noopener noreferrer"
        class="community-item group relative rounded-2xl border border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-900 p-8 hover:border-zinc-300 dark:hover:border-zinc-700 transition-colors"
      >
        <Github
          class="h-8 w-8 text-zinc-600 dark:text-zinc-400 mb-4 group-hover:text-zinc-900 dark:group-hover:text-white transition-colors"
        />
        <h3 class="text-lg font-semibold text-zinc-900 dark:text-white mb-2">
          GitHub Discussions
        </h3>
        <p class="text-zinc-600 dark:text-zinc-400">
          Ask questions, share ideas, and connect with other developers
        </p>
      </a>

      <a
        href="https://discord.gg/rU4tSyhXXU"
        target="_blank"
        rel="noopener noreferrer"
        class="community-item group relative rounded-2xl border border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-900 p-8 hover:border-zinc-300 dark:hover:border-zinc-700 transition-colors"
      >
        <MessageSquare
          className="h-8 w-8 text-zinc-600 dark:text-zinc-400 mb-4 group-hover:text-zinc-900 dark:group-hover:text-white transition-colors"
        />
        <h3 class="text-lg font-semibold text-zinc-900 dark:text-white mb-2">
          Discord Community
        </h3>
        <p class="text-zinc-600 dark:text-zinc-400">
          Chat with the community and get real-time help
        </p>
      </a>

      <a
        href="https://x.com/kaneoapp"
        target="_blank"
        rel="noopener noreferrer"
        class="community-item group relative rounded-2xl border border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-900 p-8 hover:border-zinc-300 dark:hover:border-zinc-700 transition-colors"
      >
        <Twitter
          class="h-8 w-8 text-zinc-600 dark:text-zinc-400 mb-4 group-hover:text-zinc-900 dark:group-hover:text-white transition-colors"
        />
        <h3 class="text-lg font-semibold text-zinc-900 dark:text-white mb-2">
          Twitter Updates
        </h3>
        <p class="text-zinc-600 dark:text-zinc-400">
          Follow us for the latest news and updates
        </p>
      </a>
    </div>

    <div class="mt-16 text-center">
      <button
        class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow h-9 px-4 py-2 bg-indigo-600 text-white hover:bg-indigo-500 dark:bg-indigo-500 dark:hover:bg-indigo-400"
        onclick="window.open('https://github.com/kaneo-app/app', '_blank')"
      >
        <Github class="w-4 h-4 mr-2" />
        Star on GitHub
      </button>
    </div>
  </div>
</div>

<script>
  import { gsap } from "gsap";

  export const applyCommunityAnimations = () => {
    const sections = document.querySelectorAll(".community-item");

    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry, index) => {
          if (
            entry.isIntersecting &&
            !entry.target.hasAttribute("data-animated")
          ) {
            gsap.fromTo(
              entry.target,
              { opacity: 0, y: 20 },
              {
                opacity: 1,
                y: 0,
                duration: 0.5,
                delay: index * 0.1,
              },
            );

            entry.target.setAttribute("data-animated", "true");

            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.5,
        rootMargin: "0px 0px 100px 0px",
      },
    );

    sections.forEach((element) => {
      observer.observe(element);
    });
  };

  window.addEventListener("load", applyCommunityAnimations);
</script>
