---
import fs from "node:fs/promises";
import path from "node:path";
import { GitFork, Github, Heart, Star } from "lucide-astro";

interface GitHubStats {
  stars: number;
  forks: number;
  contributors: number;
  lastUpdated?: number;
}

const CACHE_FILE = path.join(process.cwd(), ".github-stats-cache.json");
const CACHE_DURATION = 24 * 60 * 60 * 1000;

async function readCache(): Promise<GitHubStats | null> {
  try {
    const data = await fs.readFile(CACHE_FILE, "utf-8");
    const cache = JSON.parse(data);

    if (Date.now() - cache.lastUpdated < CACHE_DURATION) {
      return cache;
    }
    return null;
  } catch (error) {
    return null;
  }
}

async function writeCache(stats: GitHubStats) {
  try {
    await fs.writeFile(
      CACHE_FILE,
      JSON.stringify({ ...stats, lastUpdated: Date.now() }),
    );
  } catch (error) {
    console.error("Failed to write cache:", error);
  }
}

async function fetchGitHubStats(): Promise<GitHubStats> {
  try {
    const cached = await readCache();
    if (cached) {
      return cached;
    }

    const [repoData, contributors] = await Promise.all([
      fetch("https://api.github.com/repos/kaneo-app/app"),
      fetch("https://api.github.com/repos/kaneo-app/app/contributors"),
    ]);

    const repo = await repoData.json();
    const contributorsList = await contributors.json();

    const stats = {
      stars: repo.stargazers_count,
      forks: repo.forks_count,
      contributors: contributorsList.length,
    };

    await writeCache(stats);

    return stats;
  } catch (error) {
    console.error("Failed to fetch GitHub stats:", error);
    return {
      stars: 0,
      forks: 0,
      contributors: 0,
    };
  }
}

const stats = await fetchGitHubStats();
---

<div class="py-24 bg-zinc-50 dark:bg-zinc-900">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center">
      <h2
        class="text-3xl font-bold tracking-tight text-zinc-900 dark:text-white sm:text-4xl"
      >
        Built in the Open
      </h2>
      <p class="mt-4 text-lg text-zinc-600 dark:text-zinc-400">
        Kaneo is free and open source. Join us in making project management
        accessible to everyone.
      </p>
    </div>

    <div class="mt-16">
      <div class="grid grid-cols-1 gap-8 lg:grid-cols-2">
        <!-- Open Source Section -->
        <div
          class="feature-item relative rounded-2xl border border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-900 p-8"
        >
          <h3 class="text-xl font-semibold text-zinc-900 dark:text-white mb-4">
            Open Source
          </h3>
          <p class="text-zinc-600 dark:text-zinc-400 mb-6">
            Licensed under MIT, you're free to use, modify, and distribute Kaneo
            however you want.
          </p>
          <div class="flex gap-4">
            <button
              onclick="window.open('https://github.com/kaneo-app/app', '_blank')"
              class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow h-9 px-4 py-2 bg-zinc-900 text-white hover:bg-zinc-800 dark:bg-zinc-100 dark:text-zinc-900 dark:hover:bg-zinc-200"
            >
              <Github class="w-4 h-4 mr-2" />
              View on GitHub
            </button>
            <button
              onclick="window.open('https://github.com/kaneo-app/app/stargazers', '_blank')"
              class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow h-9 px-4 py-2 bg-zinc-100 text-zinc-900 hover:bg-zinc-200 dark:bg-zinc-800 dark:text-zinc-100 dark:hover:bg-zinc-700"
            >
              <Star class="w-4 h-4 mr-2" />
              Star
            </button>
          </div>
        </div>

        <!-- Community Driven Section -->
        <div
          class="feature-item relative rounded-2xl border border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-900 p-8"
        >
          <h3 class="text-xl font-semibold text-zinc-900 dark:text-white mb-4">
            Community Driven
          </h3>
          <p class="text-zinc-600 dark:text-zinc-400 mb-6">
            Join our growing community of developers and contributors shaping
            the future of Kaneo.
          </p>
          <div class="flex gap-4 flex-col md:flex-row">
            <div
              class="flex items-center gap-2 text-zinc-600 dark:text-zinc-400"
            >
              <Star class="w-4 h-4" />
              <span>{stats.stars} stars</span>
            </div>
            <div
              class="flex items-center gap-2 text-zinc-600 dark:text-zinc-400"
            >
              <GitFork class="w-4 h-4" />
              <span>{stats.forks} forks</span>
            </div>
            <div
              class="flex items-center gap-2 text-zinc-600 dark:text-zinc-400"
            >
              <Heart class="w-4 h-4" />
              <span>{stats.contributors} contributors</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { gsap } from "gsap";

  export const applyOpenSourceAnimations = () => {
    const sections = document.querySelectorAll(".feature-item");

    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry, index) => {
          if (
            entry.isIntersecting &&
            !entry.target.hasAttribute("data-animated")
          ) {
            gsap.fromTo(
              entry.target,
              { opacity: 0, y: 20 },
              { opacity: 1, y: 0, duration: 0.5, delay: index * 0.1 },
            );

            entry.target.setAttribute("data-animated", "true");

            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.5,
        rootMargin: "0px 0px 100px 0px",
      },
    );

    sections.forEach((element) => {
      observer.observe(element);
    });
  };

  window.addEventListener("load", applyOpenSourceAnimations);
</script>
